{"version":3,"names":[],"mappings":"","sources":["_main.es6"],"sourcesContent":["var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\n\n\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar nprogress = createCommonjsModule(function (module, exports) {\n/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress\n * @license MIT */\n\n(function(root, factory) {\n\n  if (typeof undefined === 'function' && undefined.amd) {\n    undefined(factory);\n  } else {\n    module.exports = factory();\n  }\n\n})(commonjsGlobal, function() {\n  var NProgress = {};\n\n  NProgress.version = '0.2.0';\n\n  var Settings = NProgress.settings = {\n    minimum: 0.08,\n    easing: 'ease',\n    positionUsing: '',\n    speed: 200,\n    trickle: true,\n    trickleRate: 0.02,\n    trickleSpeed: 800,\n    showSpinner: true,\n    barSelector: '[role=\"bar\"]',\n    spinnerSelector: '[role=\"spinner\"]',\n    parent: 'body',\n    template: '<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>'\n  };\n\n  /**\n   * Updates configuration.\n   *\n   *     NProgress.configure({\n   *       minimum: 0.1\n   *     });\n   */\n  NProgress.configure = function(options) {\n    var key, value;\n    for (key in options) {\n      value = options[key];\n      if (value !== undefined && options.hasOwnProperty(key)) Settings[key] = value;\n    }\n\n    return this;\n  };\n\n  /**\n   * Last number.\n   */\n\n  NProgress.status = null;\n\n  /**\n   * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.\n   *\n   *     NProgress.set(0.4);\n   *     NProgress.set(1.0);\n   */\n\n  NProgress.set = function(n) {\n    var started = NProgress.isStarted();\n\n    n = clamp(n, Settings.minimum, 1);\n    NProgress.status = (n === 1 ? null : n);\n\n    var progress = NProgress.render(!started),\n        bar      = progress.querySelector(Settings.barSelector),\n        speed    = Settings.speed,\n        ease     = Settings.easing;\n\n    progress.offsetWidth; /* Repaint */\n\n    queue(function(next) {\n      // Set positionUsing if it hasn't already been set\n      if (Settings.positionUsing === '') Settings.positionUsing = NProgress.getPositioningCSS();\n\n      // Add transition\n      css(bar, barPositionCSS(n, speed, ease));\n\n      if (n === 1) {\n        // Fade out\n        css(progress, { \n          transition: 'none', \n          opacity: 1 \n        });\n        progress.offsetWidth; /* Repaint */\n\n        setTimeout(function() {\n          css(progress, { \n            transition: 'all ' + speed + 'ms linear', \n            opacity: 0 \n          });\n          setTimeout(function() {\n            NProgress.remove();\n            next();\n          }, speed);\n        }, speed);\n      } else {\n        setTimeout(next, speed);\n      }\n    });\n\n    return this;\n  };\n\n  NProgress.isStarted = function() {\n    return typeof NProgress.status === 'number';\n  };\n\n  /**\n   * Shows the progress bar.\n   * This is the same as setting the status to 0%, except that it doesn't go backwards.\n   *\n   *     NProgress.start();\n   *\n   */\n  NProgress.start = function() {\n    if (!NProgress.status) NProgress.set(0);\n\n    var work = function() {\n      setTimeout(function() {\n        if (!NProgress.status) return;\n        NProgress.trickle();\n        work();\n      }, Settings.trickleSpeed);\n    };\n\n    if (Settings.trickle) work();\n\n    return this;\n  };\n\n  /**\n   * Hides the progress bar.\n   * This is the *sort of* the same as setting the status to 100%, with the\n   * difference being `done()` makes some placebo effect of some realistic motion.\n   *\n   *     NProgress.done();\n   *\n   * If `true` is passed, it will show the progress bar even if its hidden.\n   *\n   *     NProgress.done(true);\n   */\n\n  NProgress.done = function(force) {\n    if (!force && !NProgress.status) return this;\n\n    return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);\n  };\n\n  /**\n   * Increments by a random amount.\n   */\n\n  NProgress.inc = function(amount) {\n    var n = NProgress.status;\n\n    if (!n) {\n      return NProgress.start();\n    } else {\n      if (typeof amount !== 'number') {\n        amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);\n      }\n\n      n = clamp(n + amount, 0, 0.994);\n      return NProgress.set(n);\n    }\n  };\n\n  NProgress.trickle = function() {\n    return NProgress.inc(Math.random() * Settings.trickleRate);\n  };\n\n  /**\n   * Waits for all supplied jQuery promises and\n   * increases the progress as the promises resolve.\n   *\n   * @param $promise jQUery Promise\n   */\n  (function() {\n    var initial = 0, current = 0;\n\n    NProgress.promise = function($promise) {\n      if (!$promise || $promise.state() === \"resolved\") {\n        return this;\n      }\n\n      if (current === 0) {\n        NProgress.start();\n      }\n\n      initial++;\n      current++;\n\n      $promise.always(function() {\n        current--;\n        if (current === 0) {\n            initial = 0;\n            NProgress.done();\n        } else {\n            NProgress.set((initial - current) / initial);\n        }\n      });\n\n      return this;\n    };\n\n  })();\n\n  /**\n   * (Internal) renders the progress bar markup based on the `template`\n   * setting.\n   */\n\n  NProgress.render = function(fromStart) {\n    if (NProgress.isRendered()) return document.getElementById('nprogress');\n\n    addClass(document.documentElement, 'nprogress-busy');\n    \n    var progress = document.createElement('div');\n    progress.id = 'nprogress';\n    progress.innerHTML = Settings.template;\n\n    var bar      = progress.querySelector(Settings.barSelector),\n        perc     = fromStart ? '-100' : toBarPerc(NProgress.status || 0),\n        parent   = document.querySelector(Settings.parent),\n        spinner;\n    \n    css(bar, {\n      transition: 'all 0 linear',\n      transform: 'translate3d(' + perc + '%,0,0)'\n    });\n\n    if (!Settings.showSpinner) {\n      spinner = progress.querySelector(Settings.spinnerSelector);\n      spinner && removeElement(spinner);\n    }\n\n    if (parent != document.body) {\n      addClass(parent, 'nprogress-custom-parent');\n    }\n\n    parent.appendChild(progress);\n    return progress;\n  };\n\n  /**\n   * Removes the element. Opposite of render().\n   */\n\n  NProgress.remove = function() {\n    removeClass(document.documentElement, 'nprogress-busy');\n    removeClass(document.querySelector(Settings.parent), 'nprogress-custom-parent');\n    var progress = document.getElementById('nprogress');\n    progress && removeElement(progress);\n  };\n\n  /**\n   * Checks if the progress bar is rendered.\n   */\n\n  NProgress.isRendered = function() {\n    return !!document.getElementById('nprogress');\n  };\n\n  /**\n   * Determine which positioning CSS rule to use.\n   */\n\n  NProgress.getPositioningCSS = function() {\n    // Sniff on document.body.style\n    var bodyStyle = document.body.style;\n\n    // Sniff prefixes\n    var vendorPrefix = ('WebkitTransform' in bodyStyle) ? 'Webkit' :\n                       ('MozTransform' in bodyStyle) ? 'Moz' :\n                       ('msTransform' in bodyStyle) ? 'ms' :\n                       ('OTransform' in bodyStyle) ? 'O' : '';\n\n    if (vendorPrefix + 'Perspective' in bodyStyle) {\n      // Modern browsers with 3D support, e.g. Webkit, IE10\n      return 'translate3d';\n    } else if (vendorPrefix + 'Transform' in bodyStyle) {\n      // Browsers without 3D support, e.g. IE9\n      return 'translate';\n    } else {\n      // Browsers without translate() support, e.g. IE7-8\n      return 'margin';\n    }\n  };\n\n  /**\n   * Helpers\n   */\n\n  function clamp(n, min, max) {\n    if (n < min) return min;\n    if (n > max) return max;\n    return n;\n  }\n\n  /**\n   * (Internal) converts a percentage (`0..1`) to a bar translateX\n   * percentage (`-100%..0%`).\n   */\n\n  function toBarPerc(n) {\n    return (-1 + n) * 100;\n  }\n\n\n  /**\n   * (Internal) returns the correct CSS for changing the bar's\n   * position given an n percentage, and speed and ease from Settings\n   */\n\n  function barPositionCSS(n, speed, ease) {\n    var barCSS;\n\n    if (Settings.positionUsing === 'translate3d') {\n      barCSS = { transform: 'translate3d('+toBarPerc(n)+'%,0,0)' };\n    } else if (Settings.positionUsing === 'translate') {\n      barCSS = { transform: 'translate('+toBarPerc(n)+'%,0)' };\n    } else {\n      barCSS = { 'margin-left': toBarPerc(n)+'%' };\n    }\n\n    barCSS.transition = 'all '+speed+'ms '+ease;\n\n    return barCSS;\n  }\n\n  /**\n   * (Internal) Queues a function to be executed.\n   */\n\n  var queue = (function() {\n    var pending = [];\n    \n    function next() {\n      var fn = pending.shift();\n      if (fn) {\n        fn(next);\n      }\n    }\n\n    return function(fn) {\n      pending.push(fn);\n      if (pending.length == 1) next();\n    };\n  })();\n\n  /**\n   * (Internal) Applies css properties to an element, similar to the jQuery \n   * css method.\n   *\n   * While this helper does assist with vendor prefixed property names, it \n   * does not perform any manipulation of values prior to setting styles.\n   */\n\n  var css = (function() {\n    var cssPrefixes = [ 'Webkit', 'O', 'Moz', 'ms' ],\n        cssProps    = {};\n\n    function camelCase(string) {\n      return string.replace(/^-ms-/, 'ms-').replace(/-([\\da-z])/gi, function(match, letter) {\n        return letter.toUpperCase();\n      });\n    }\n\n    function getVendorProp(name) {\n      var style = document.body.style;\n      if (name in style) return name;\n\n      var i = cssPrefixes.length,\n          capName = name.charAt(0).toUpperCase() + name.slice(1),\n          vendorName;\n      while (i--) {\n        vendorName = cssPrefixes[i] + capName;\n        if (vendorName in style) return vendorName;\n      }\n\n      return name;\n    }\n\n    function getStyleProp(name) {\n      name = camelCase(name);\n      return cssProps[name] || (cssProps[name] = getVendorProp(name));\n    }\n\n    function applyCss(element, prop, value) {\n      prop = getStyleProp(prop);\n      element.style[prop] = value;\n    }\n\n    return function(element, properties) {\n      var args = arguments,\n          prop, \n          value;\n\n      if (args.length == 2) {\n        for (prop in properties) {\n          value = properties[prop];\n          if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value);\n        }\n      } else {\n        applyCss(element, args[1], args[2]);\n      }\n    }\n  })();\n\n  /**\n   * (Internal) Determines if an element or space separated list of class names contains a class name.\n   */\n\n  function hasClass(element, name) {\n    var list = typeof element == 'string' ? element : classList(element);\n    return list.indexOf(' ' + name + ' ') >= 0;\n  }\n\n  /**\n   * (Internal) Adds a class to an element.\n   */\n\n  function addClass(element, name) {\n    var oldList = classList(element),\n        newList = oldList + name;\n\n    if (hasClass(oldList, name)) return; \n\n    // Trim the opening space.\n    element.className = newList.substring(1);\n  }\n\n  /**\n   * (Internal) Removes a class from an element.\n   */\n\n  function removeClass(element, name) {\n    var oldList = classList(element),\n        newList;\n\n    if (!hasClass(element, name)) return;\n\n    // Replace the class name.\n    newList = oldList.replace(' ' + name + ' ', ' ');\n\n    // Trim the opening and closing spaces.\n    element.className = newList.substring(1, newList.length - 1);\n  }\n\n  /**\n   * (Internal) Gets a space separated list of the class names on the element. \n   * The list is wrapped with a single space on each end to facilitate finding \n   * matches within the list.\n   */\n\n  function classList(element) {\n    return (' ' + (element.className || '') + ' ').replace(/\\s+/gi, ' ');\n  }\n\n  /**\n   * (Internal) Removes an element from the DOM.\n   */\n\n  function removeElement(element) {\n    element && element.parentNode && element.parentNode.removeChild(element);\n  }\n\n  return NProgress;\n});\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/* eslint-disable */\n// Modified version of head.load.js, removed errorTimeout\n(function (win, undefined) {\n\t\"use strict\";\n\n\t//#region variables\n\n\tvar doc = win.document,\n\t    domWaiters = [],\n\t    handlers = {},\n\t    // user functions waiting for events\n\tassets = {},\n\t    // loadable items in various states\n\tisAsync = \"async\" in doc.createElement(\"script\") || \"MozAppearance\" in doc.documentElement.style || win.opera,\n\t    isDomReady,\n\n\n\t/*** public API ***/\n\theadVar = win.head_conf && win.head_conf.head || \"head\",\n\t    api = win[headVar] = win[headVar] || function () {\n\t\tapi.ready.apply(null, arguments);\n\t},\n\n\n\t// states\n\tPRELOADING = 1,\n\t    PRELOADED = 2,\n\t    LOADING = 3,\n\t    LOADED = 4;\n\t//#endregion\n\n\t//#region PRIVATE functions\n\n\t//#region Helper functions\n\tfunction noop() {\n\t\t// does nothing\n\t}\n\n\tfunction each(arr, callback) {\n\t\tif (!arr) {\n\t\t\treturn;\n\t\t}\n\n\t\t// arguments special type\n\t\tif ((typeof arr === \"undefined\" ? \"undefined\" : _typeof(arr)) === \"object\") {\n\t\t\tarr = [].slice.call(arr);\n\t\t}\n\n\t\t// do the job\n\t\tfor (var i = 0, l = arr.length; i < l; i++) {\n\t\t\tcallback.call(arr, arr[i], i);\n\t\t}\n\t}\n\n\t/* A must read: http://bonsaiden.github.com/JavaScript-Garden\n  ************************************************************/\n\tfunction is(type, obj) {\n\t\tvar clas = Object.prototype.toString.call(obj).slice(8, -1);\n\t\treturn obj !== undefined && obj !== null && clas === type;\n\t}\n\n\tfunction isFunction(item) {\n\t\treturn is(\"Function\", item);\n\t}\n\n\tfunction isArray(item) {\n\t\treturn is(\"Array\", item);\n\t}\n\n\tfunction toLabel(url) {\n\t\t///<summary>Converts a url to a file label</summary>\n\t\tvar items = url.split(\"/\"),\n\t\t    name = items[items.length - 1],\n\t\t    i = name.indexOf(\"?\");\n\n\t\treturn i !== -1 ? name.substring(0, i) : name;\n\t}\n\n\t// INFO: this look like a \"im triggering callbacks all over the place, but only wanna run it one time function\" ..should try to make everything work without it if possible\n\t// INFO: Even better. Look into promises/defered's like jQuery is doing\n\tfunction one(callback) {\n\t\t///<summary>Execute a callback only once</summary>\n\t\tcallback = callback || noop;\n\n\t\tif (callback._done) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallback();\n\t\tcallback._done = 1;\n\t}\n\t//#endregion\n\n\tfunction conditional(test, success, failure, callback) {\n\t\t///<summary>\n\t\t/// INFO: use cases:\n\t\t///    head.test(condition, null       , \"file.NOk\" , callback);\n\t\t///    head.test(condition, \"fileOk.js\", null       , callback);\n\t\t///    head.test(condition, \"fileOk.js\", \"file.NOk\" , callback);\n\t\t///    head.test(condition, \"fileOk.js\", [\"file.NOk\", \"file.NOk\"], callback);\n\t\t///    head.test({\n\t\t///               test    : condition,\n\t\t///               success : [{ label1: \"file1Ok.js\"  }, { label2: \"file2Ok.js\" }],\n\t\t///               failure : [{ label1: \"file1NOk.js\" }, { label2: \"file2NOk.js\" }],\n\t\t///               callback: callback\n\t\t///    );\n\t\t///    head.test({\n\t\t///               test    : condition,\n\t\t///               success : [\"file1Ok.js\" , \"file2Ok.js\"],\n\t\t///               failure : [\"file1NOk.js\", \"file2NOk.js\"],\n\t\t///               callback: callback\n\t\t///    );\n\t\t///</summary>\n\t\tvar obj = (typeof test === \"undefined\" ? \"undefined\" : _typeof(test)) === \"object\" ? test : {\n\t\t\ttest: test,\n\t\t\tsuccess: !!success ? isArray(success) ? success : [success] : false,\n\t\t\tfailure: !!failure ? isArray(failure) ? failure : [failure] : false,\n\t\t\tcallback: callback || noop\n\t\t};\n\n\t\t// Test Passed ?\n\t\tvar passed = !!obj.test;\n\n\t\t// Do we have a success case\n\t\tif (passed && !!obj.success) {\n\t\t\tobj.success.push(obj.callback);\n\t\t\tapi.load.apply(null, obj.success);\n\t\t}\n\t\t// Do we have a fail case\n\t\telse if (!passed && !!obj.failure) {\n\t\t\t\tobj.failure.push(obj.callback);\n\t\t\t\tapi.load.apply(null, obj.failure);\n\t\t\t} else {\n\t\t\t\tcallback();\n\t\t\t}\n\n\t\treturn api;\n\t}\n\n\tfunction getAsset(item) {\n\t\t///<summary>\n\t\t/// Assets are in the form of\n\t\t/// {\n\t\t///     name : label,\n\t\t///     url  : url,\n\t\t///     state: state\n\t\t/// }\n\t\t///</summary>\n\t\tvar asset = {};\n\n\t\tif ((typeof item === \"undefined\" ? \"undefined\" : _typeof(item)) === \"object\") {\n\t\t\tfor (var label in item) {\n\t\t\t\tif (!!item[label]) {\n\t\t\t\t\tasset = {\n\t\t\t\t\t\tname: label,\n\t\t\t\t\t\turl: item[label]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tasset = {\n\t\t\t\tname: toLabel(item),\n\t\t\t\turl: item\n\t\t\t};\n\t\t}\n\n\t\t// is the item already existant\n\t\tvar existing = assets[asset.name];\n\t\tif (existing && existing.url === asset.url) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tassets[asset.name] = asset;\n\t\treturn asset;\n\t}\n\n\tfunction allLoaded(items) {\n\t\titems = items || assets;\n\n\t\tfor (var name in items) {\n\t\t\tif (items.hasOwnProperty(name) && items[name].state !== LOADED) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction onPreload(asset) {\n\t\tasset.state = PRELOADED;\n\n\t\teach(asset.onpreload, function (afterPreload) {\n\t\t\tafterPreload.call();\n\t\t});\n\t}\n\n\tfunction preLoad(asset, callback) {\n\t\tif (asset.state === undefined) {\n\n\t\t\tasset.state = PRELOADING;\n\t\t\tasset.onpreload = [];\n\n\t\t\tloadAsset({ url: asset.url, type: \"cache\" }, function () {\n\t\t\t\tonPreload(asset);\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction apiLoadHack() {\n\t\t/// <summary>preload with text/cache hack\n\t\t///\n\t\t/// head.load(\"http://domain.com/file.js\",\"http://domain.com/file.js\", callBack)\n\t\t/// head.load([\"http://domain.com/file.js\",\"http://domain.com/file.js\"], callBack)\n\t\t/// head.load({ label1: \"http://domain.com/file.js\" }, { label2: \"http://domain.com/file.js\" }, callBack)\n\t\t/// head.load([{ label1: \"http://domain.com/file.js\" }, { label2: \"http://domain.com/file.js\" }], callBack)\n\t\t/// </summary>\n\t\tvar args = arguments,\n\t\t    callback = args[args.length - 1],\n\t\t    rest = [].slice.call(args, 1),\n\t\t    next = rest[0];\n\n\t\tif (!isFunction(callback)) {\n\t\t\tcallback = null;\n\t\t}\n\n\t\t// if array, repush as args\n\t\tif (isArray(args[0])) {\n\t\t\targs[0].push(callback);\n\t\t\tapi.load.apply(null, args[0]);\n\n\t\t\treturn api;\n\t\t}\n\n\t\t// multiple arguments\n\t\tif (!!next) {\n\t\t\t/* Preload with text/cache hack (not good!)\n    * http://blog.getify.com/on-script-loaders/\n    * http://www.nczonline.net/blog/2010/12/21/thoughts-on-script-loaders/\n    * If caching is not configured correctly on the server, then items could load twice !\n    *************************************************************************************/\n\t\t\teach(rest, function (item) {\n\t\t\t\t// item is not a callback or empty string\n\t\t\t\tif (!isFunction(item) && !!item) {\n\t\t\t\t\tpreLoad(getAsset(item));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// execute\n\t\t\tload(getAsset(args[0]), isFunction(next) ? next : function () {\n\t\t\t\tapi.load.apply(null, rest);\n\t\t\t});\n\t\t} else {\n\t\t\t// single item\n\t\t\tload(getAsset(args[0]));\n\t\t}\n\n\t\treturn api;\n\t}\n\n\tfunction apiLoadAsync() {\n\t\t///<summary>\n\t\t/// simply load and let browser take care of ordering\n\t\t///\n\t\t/// head.load(\"http://domain.com/file.js\",\"http://domain.com/file.js\", callBack)\n\t\t/// head.load([\"http://domain.com/file.js\",\"http://domain.com/file.js\"], callBack)\n\t\t/// head.load({ label1: \"http://domain.com/file.js\" }, { label2: \"http://domain.com/file.js\" }, callBack)\n\t\t/// head.load([{ label1: \"http://domain.com/file.js\" }, { label2: \"http://domain.com/file.js\" }], callBack)\n\t\t///</summary>\n\t\tvar args = arguments,\n\t\t    callback = args[args.length - 1],\n\t\t    items = {};\n\n\t\tif (!isFunction(callback)) {\n\t\t\tcallback = null;\n\t\t}\n\n\t\t// if array, repush as args\n\t\tif (isArray(args[0])) {\n\t\t\targs[0].push(callback);\n\t\t\tapi.load.apply(null, args[0]);\n\n\t\t\treturn api;\n\t\t}\n\n\t\t// JRH 262#issuecomment-26288601\n\t\t// First populate the items array.\n\t\t// When allLoaded is called, all items will be populated.\n\t\t// Issue when lazy loaded, the callback can execute early.\n\t\teach(args, function (item, i) {\n\t\t\tif (item !== callback) {\n\t\t\t\titem = getAsset(item);\n\t\t\t\titems[item.name] = item;\n\t\t\t}\n\t\t});\n\n\t\teach(args, function (item, i) {\n\t\t\tif (item !== callback) {\n\t\t\t\titem = getAsset(item);\n\n\t\t\t\tload(item, function () {\n\t\t\t\t\tif (allLoaded(items)) {\n\t\t\t\t\t\tone(callback);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn api;\n\t}\n\n\tfunction load(asset, callback) {\n\t\t///<summary>Used with normal loading logic</summary>\n\t\tcallback = callback || noop;\n\n\t\tif (asset.state === LOADED) {\n\t\t\tcallback();\n\t\t\treturn;\n\t\t}\n\n\t\t// INFO: why would we trigger a ready event when its not really loaded yet ?\n\t\tif (asset.state === LOADING) {\n\t\t\tapi.ready(asset.name, callback);\n\t\t\treturn;\n\t\t}\n\n\t\tif (asset.state === PRELOADING) {\n\t\t\tasset.onpreload.push(function () {\n\t\t\t\tload(asset, callback);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tasset.state = LOADING;\n\n\t\tloadAsset(asset, function () {\n\t\t\tasset.state = LOADED;\n\n\t\t\tcallback();\n\n\t\t\t// handlers for this asset\n\t\t\teach(handlers[asset.name], function (fn) {\n\t\t\t\tone(fn);\n\t\t\t});\n\n\t\t\t// dom is ready & no assets are queued for loading\n\t\t\t// INFO: shouldn't we be doing the same test above ?\n\t\t\tif (isDomReady && allLoaded()) {\n\t\t\t\teach(handlers.ALL, function (fn) {\n\t\t\t\t\tone(fn);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction getExtension(url) {\n\t\turl = url || \"\";\n\n\t\tvar items = url.split(\"?\")[0].split(\".\");\n\t\treturn items[items.length - 1].toLowerCase();\n\t}\n\n\t/* Parts inspired from: https://github.com/cujojs/curl\n  ******************************************************/\n\tfunction loadAsset(asset, callback) {\n\t\tcallback = callback || noop;\n\n\t\tfunction error(event) {\n\t\t\tevent = event || win.event;\n\n\t\t\t// release event listeners\n\t\t\tele.onload = ele.onreadystatechange = ele.onerror = null;\n\n\t\t\t// do callback\n\t\t\tcallback();\n\n\t\t\t// need some more detailed error handling here\n\t\t}\n\n\t\tfunction process(event) {\n\t\t\tevent = event || win.event;\n\n\t\t\t// IE 7/8 (2 events on 1st load)\n\t\t\t// 1) event.type = readystatechange, s.readyState = loading\n\t\t\t// 2) event.type = readystatechange, s.readyState = loaded\n\n\t\t\t// IE 7/8 (1 event on reload)\n\t\t\t// 1) event.type = readystatechange, s.readyState = complete\n\n\t\t\t// event.type === 'readystatechange' && /loaded|complete/.test(s.readyState)\n\n\t\t\t// IE 9 (3 events on 1st load)\n\t\t\t// 1) event.type = readystatechange, s.readyState = loading\n\t\t\t// 2) event.type = readystatechange, s.readyState = loaded\n\t\t\t// 3) event.type = load            , s.readyState = loaded\n\n\t\t\t// IE 9 (2 events on reload)\n\t\t\t// 1) event.type = readystatechange, s.readyState = complete\n\t\t\t// 2) event.type = load            , s.readyState = complete\n\n\t\t\t// event.type === 'load'             && /loaded|complete/.test(s.readyState)\n\t\t\t// event.type === 'readystatechange' && /loaded|complete/.test(s.readyState)\n\n\t\t\t// IE 10 (3 events on 1st load)\n\t\t\t// 1) event.type = readystatechange, s.readyState = loading\n\t\t\t// 2) event.type = load            , s.readyState = complete\n\t\t\t// 3) event.type = readystatechange, s.readyState = loaded\n\n\t\t\t// IE 10 (3 events on reload)\n\t\t\t// 1) event.type = readystatechange, s.readyState = loaded\n\t\t\t// 2) event.type = load            , s.readyState = complete\n\t\t\t// 3) event.type = readystatechange, s.readyState = complete\n\n\t\t\t// event.type === 'load'             && /loaded|complete/.test(s.readyState)\n\t\t\t// event.type === 'readystatechange' && /complete/.test(s.readyState)\n\n\t\t\t// Other Browsers (1 event on 1st load)\n\t\t\t// 1) event.type = load, s.readyState = undefined\n\n\t\t\t// Other Browsers (1 event on reload)\n\t\t\t// 1) event.type = load, s.readyState = undefined\n\n\t\t\t// event.type == 'load' && s.readyState = undefined\n\n\t\t\t// !doc.documentMode is for IE6/7, IE8+ have documentMode\n\t\t\tif (event.type === \"load\" || /loaded|complete/.test(ele.readyState) && (!doc.documentMode || doc.documentMode < 9)) {\n\t\t\t\t// remove timeouts\n\t\t\t\twin.clearTimeout(asset.errorTimeout);\n\t\t\t\twin.clearTimeout(asset.cssTimeout);\n\n\t\t\t\t// release event listeners\n\t\t\t\tele.onload = ele.onreadystatechange = ele.onerror = null;\n\n\t\t\t\t// do callback\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\n\t\tfunction isCssLoaded() {\n\t\t\t// should we test again ? 20 retries = 5secs ..after that, the callback will be triggered by the error handler at 7secs\n\t\t\tif (asset.state !== LOADED && asset.cssRetries <= 20) {\n\n\t\t\t\t// loop through stylesheets\n\t\t\t\tfor (var i = 0, l = doc.styleSheets.length; i < l; i++) {\n\t\t\t\t\t// do we have a match ?\n\t\t\t\t\t// we need to tests agains ele.href and not asset.url, because a local file will be assigned the full http path on a link element\n\t\t\t\t\tif (doc.styleSheets[i].href === ele.href) {\n\t\t\t\t\t\tprocess({ \"type\": \"load\" });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// increment & try again\n\t\t\t\tasset.cssRetries++;\n\t\t\t\tasset.cssTimeout = win.setTimeout(isCssLoaded, 250);\n\t\t\t}\n\t\t}\n\n\t\tvar ele;\n\t\tvar ext = getExtension(asset.url);\n\n\t\tif (ext === \"css\") {\n\t\t\tele = doc.createElement(\"link\");\n\t\t\tele.type = \"text/\" + (asset.type || \"css\");\n\t\t\tele.rel = \"stylesheet\";\n\t\t\tele.href = asset.url;\n\n\t\t\t/* onload supported for CSS on unsupported browsers\n    * Safari windows 5.1.7, FF < 10\n    */\n\n\t\t\t// Set counter to zero\n\t\t\tasset.cssRetries = 0;\n\t\t\tasset.cssTimeout = win.setTimeout(isCssLoaded, 500);\n\t\t} else {\n\t\t\tele = doc.createElement(\"script\");\n\t\t\tele.type = \"text/\" + (asset.type || \"javascript\");\n\t\t\tele.src = asset.url;\n\t\t}\n\n\t\tele.onload = ele.onreadystatechange = process;\n\t\tele.onerror = error;\n\n\t\t/* Good read, but doesn't give much hope !\n   * http://blog.getify.com/on-script-loaders/\n   * http://www.nczonline.net/blog/2010/12/21/thoughts-on-script-loaders/\n   * https://hacks.mozilla.org/2009/06/defer/\n   */\n\n\t\t// ASYNC: load in parallel and execute as soon as possible\n\t\tele.async = false;\n\t\t// DEFER: load in parallel but maintain execution order\n\t\tele.defer = false;\n\n\t\t// timout for asset loading\n\t\tasset.errorTimeout = undefined;\n\n\t\t// use insertBefore to keep IE from throwing Operation Aborted (thx Bryan Forbes!)\n\t\tvar head = doc.head || doc.getElementsByTagName(\"head\")[0];\n\n\t\t// but insert at end of head, because otherwise if it is a stylesheet, it will not override values\n\t\thead.insertBefore(ele, head.lastChild);\n\t}\n\n\t/* Parts inspired from: https://github.com/jrburke/requirejs\n  ************************************************************/\n\tfunction init() {\n\t\tvar items = doc.getElementsByTagName(\"script\");\n\n\t\t// look for a script with a data-head-init attribute\n\t\tfor (var i = 0, l = items.length; i < l; i++) {\n\t\t\tvar dataMain = items[i].getAttribute(\"data-headjs-load\");\n\t\t\tif (!!dataMain) {\n\t\t\t\tapi.load(dataMain);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction ready(key, callback) {\n\t\t///<summary>\n\t\t/// INFO: use cases:\n\t\t///    head.ready(callBack);\n\t\t///    head.ready(document , callBack);\n\t\t///    head.ready(\"file.js\", callBack);\n\t\t///    head.ready(\"label\"  , callBack);\n\t\t///    head.ready([\"label1\", \"label2\"], callback);\n\t\t///</summary>\n\n\t\t// DOM ready check: head.ready(document, function() { });\n\t\tif (key === doc) {\n\t\t\tif (isDomReady) {\n\t\t\t\tone(callback);\n\t\t\t} else {\n\t\t\t\tdomWaiters.push(callback);\n\t\t\t}\n\n\t\t\treturn api;\n\t\t}\n\n\t\t// shift arguments\n\t\tif (isFunction(key)) {\n\t\t\tcallback = key;\n\t\t\tkey = \"ALL\"; // holds all callbacks that where added without labels: ready(callBack)\n\t\t}\n\n\t\t// queue all items from key and return. The callback will be executed if all items from key are already loaded.\n\t\tif (isArray(key)) {\n\t\t\tvar items = {};\n\n\t\t\teach(key, function (item) {\n\t\t\t\titems[item] = assets[item];\n\n\t\t\t\tapi.ready(item, function () {\n\t\t\t\t\tif (allLoaded(items)) {\n\t\t\t\t\t\tone(callback);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn api;\n\t\t}\n\n\t\t// make sure arguments are sane\n\t\tif (typeof key !== \"string\" || !isFunction(callback)) {\n\t\t\treturn api;\n\t\t}\n\n\t\t// this can also be called when we trigger events based on filenames & labels\n\t\tvar asset = assets[key];\n\n\t\t// item already loaded --> execute and return\n\t\tif (asset && asset.state === LOADED || key === \"ALL\" && allLoaded() && isDomReady) {\n\t\t\tone(callback);\n\t\t\treturn api;\n\t\t}\n\n\t\tvar arr = handlers[key];\n\t\tif (!arr) {\n\t\t\tarr = handlers[key] = [callback];\n\t\t} else {\n\t\t\tarr.push(callback);\n\t\t}\n\n\t\treturn api;\n\t}\n\n\t/* Mix of stuff from jQuery & IEContentLoaded\n  * http://dev.w3.org/html5/spec/the-end.html#the-end\n  ***************************************************/\n\tfunction domReady() {\n\t\t// Make sure body exists, at least, in case IE gets a little overzealous (jQuery ticket #5443).\n\t\tif (!doc.body) {\n\t\t\t// let's not get nasty by setting a timeout too small.. (loop mania guaranteed if assets are queued)\n\t\t\twin.clearTimeout(api.readyTimeout);\n\t\t\tapi.readyTimeout = win.setTimeout(domReady, 50);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isDomReady) {\n\t\t\tisDomReady = true;\n\n\t\t\tinit();\n\t\t\teach(domWaiters, function (fn) {\n\t\t\t\tone(fn);\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction domContentLoaded() {\n\t\t// W3C\n\t\tif (doc.addEventListener) {\n\t\t\tdoc.removeEventListener(\"DOMContentLoaded\", domContentLoaded, false);\n\t\t\tdomReady();\n\t\t}\n\n\t\t// IE\n\t\telse if (doc.readyState === \"complete\") {\n\t\t\t\t// we're here because readyState === \"complete\" in oldIE\n\t\t\t\t// which is good enough for us to call the dom ready!\n\t\t\t\tdoc.detachEvent(\"onreadystatechange\", domContentLoaded);\n\t\t\t\tdomReady();\n\t\t\t}\n\t}\n\n\t// Catch cases where ready() is called after the browser event has already occurred.\n\t// we once tried to use readyState \"interactive\" here, but it caused issues like the one\n\t// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\tif (doc.readyState === \"complete\") {\n\t\tdomReady();\n\t}\n\n\t// W3C\n\telse if (doc.addEventListener) {\n\t\t\tdoc.addEventListener(\"DOMContentLoaded\", domContentLoaded, false);\n\n\t\t\t// A fallback to window.onload, that will always work\n\t\t\twin.addEventListener(\"load\", domReady, false);\n\t\t}\n\n\t\t// IE\n\t\telse {\n\t\t\t\t// Ensure firing before onload, maybe late but safe also for iframes\n\t\t\t\tdoc.attachEvent(\"onreadystatechange\", domContentLoaded);\n\n\t\t\t\t// A fallback to window.onload, that will always work\n\t\t\t\twin.attachEvent(\"onload\", domReady);\n\n\t\t\t\t// If IE and not a frame\n\t\t\t\t// continually check to see if the document is ready\n\t\t\t\tvar top = false;\n\n\t\t\t\ttry {\n\t\t\t\t\ttop = !win.frameElement && doc.documentElement;\n\t\t\t\t} catch (e) {}\n\n\t\t\t\tif (top && top.doScroll) {\n\t\t\t\t\t(function doScrollCheck() {\n\t\t\t\t\t\tif (!isDomReady) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t// Use the trick by Diego Perini\n\t\t\t\t\t\t\t\t// http://javascript.nwbox.com/IEContentLoaded/\n\t\t\t\t\t\t\t\ttop.doScroll(\"left\");\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t// let's not get nasty by setting a timeout too small.. (loop mania guaranteed if assets are queued)\n\t\t\t\t\t\t\t\twin.clearTimeout(api.readyTimeout);\n\t\t\t\t\t\t\t\tapi.readyTimeout = win.setTimeout(doScrollCheck, 50);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// and execute any waiting functions\n\t\t\t\t\t\t\tdomReady();\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t}\n\t//#endregion\n\n\t//#region Public Exports\n\t// INFO: determine which method to use for loading\n\tapi.load = api.js = isAsync ? apiLoadAsync : apiLoadHack;\n\tapi.test = conditional;\n\tapi.ready = ready;\n\t//#endregion\n\n\t//#region INIT\n\t// perform this when DOM is ready\n\tapi.ready(doc, function () {\n\t\tif (allLoaded()) {\n\t\t\teach(handlers.ALL, function (callback) {\n\t\t\t\tone(callback);\n\t\t\t});\n\t\t}\n\n\t\tif (api.feature) {\n\t\t\tapi.feature(\"domloaded\", true);\n\t\t}\n\t});\n\t//#endregion\n})(window);\n\n/* global head */\nhead.load(document.body.getAttribute('data-loader').split(';').map(function (script) {\n  var url = script.trim();\n  var label = void 0;\n\n  var parts = url.match(/^(.+):(.[^/$].*)$/);\n  if (parts) {\n    label = parts[1];\n    url = parts[2];\n  } else {\n    // If no label found, then is label set to filename without args after ?\n    label = url.match(/([^?/]+)(\\?.+)?$/)[1];\n  }\n\n  var out = {};\n  out[label] = url;\n  return out;\n}));\n\n/* global head */\n/* global loader */\n/* global Globalize */\n// Export libs global\nwindow.nprogress = nprogress;\n\n// Config progress bar\nnprogress.configure({ easing: 'cubic-bezier(0.455, 0.03, 0.515, 0.955)', speed: 600 });\n\n// Wait for localization\n// head.ready(['locale'], () => {\n//   loader.showMsg(Globalize.formatMessage('loader/loading/scripts'));\n// });\n"],"file":"../loader.js"}