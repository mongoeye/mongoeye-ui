{"version":3,"names":[],"mappings":"","sources":["_main.es6"],"sourcesContent":["/* global _context */\n/* eslint no-console:\"off\" */\n/* eslint no-param-reassign: \"off\" */\n_context.invoke('Nittro', function (DOM, FlashesService, PageService, BuilderExtension) {\n  var TweaksExtension = _context.extend(BuilderExtension, function (containerBuilder, config) {\n    TweaksExtension.Super.call(this, containerBuilder, config);\n  }, {\n    setup: function setup() {\n      var _this = this;\n\n      var builder = this._getContainerBuilder();\n\n      // Set flashes default target\n      builder.getServiceDefinition('flashes').addSetup(function (flashes) {\n        flashes.add = function (content, type, target, rich) {\n          return FlashesService.prototype.add.apply(_this, [content, type, target || 'flashes', rich]);\n        };\n      });\n\n      // Handle ajax errors\n      builder.getServiceDefinition('page').addSetup(function (page) {\n        var currentTransaction = null;\n\n        function afterTransaction() {\n          currentTransaction = null;\n        }\n\n        page.on('transaction-created', function (evt) {\n          currentTransaction = evt.data.transaction;\n          currentTransaction.then(afterTransaction, afterTransaction);\n        });\n\n        page.on('before-transaction', function (evt) {\n          if (evt.data.context.element && ['A', 'FORM'].indexOf(evt.data.context.element.tagName) !== -1) {\n            if (currentTransaction) {\n              // Prevent default browser action (open link or send form)\n              evt.data.context.event.preventDefault();\n              // Remove element focus\n              evt.data.context.element.blur();\n              throw Error('Another request is still running.');\n            }\n          }\n        });\n\n        // Suppresses error 'Uncaught (in promise)' on request error\n        page.open = function (url, method, data, context) {\n          var promise = PageService.prototype.open.apply(this, arguments);\n          promise.catch(function (e) {\n            var msg = 'Cannot dispatch ' + method.toUpperCase() + ' request: ' + url + ' ';\n            if (e) {\n              console.warn(e, msg);\n            } else {\n              console.warn(msg);\n            }\n          });\n          return promise;\n        };\n\n        page.sendForm = function () {\n          var promise = PageService.prototype.sendForm.apply(this, arguments);\n          promise.catch(function () {});\n          return promise;\n        };\n      });\n    }\n  });\n\n  _context.register(TweaksExtension, 'TweaksExtension');\n}, {\n  DOM: 'Utils.DOM',\n  FlashesService: 'Nittro.Flashes.Service',\n  PageService: 'Nittro.Page.Service',\n  BuilderExtension: 'Nittro.DI.BuilderExtension'\n});\n\n/* global _context */\n/* global nprogress */\n_context.invoke('Nittro', function (BuilderExtension) {\n  var AjaxProgressExtension = _context.extend(BuilderExtension, function (containerBuilder, config) {\n    AjaxProgressExtension.Super.call(this, containerBuilder, config);\n  }, {\n    setup: function setup() {\n      function showSpinner() {\n        nprogress.start();\n        nprogress.set(0.8);\n      }\n\n      function hideSpinner() {\n        nprogress.done();\n      }\n\n      var builder = this._getContainerBuilder();\n      builder.getServiceDefinition('page').addSetup(function (page) {\n        page.on('transaction-created', function (evt) {\n          if (!evt.data.context.event || !evt.data.context.event.data || !evt.data.context.event.data.disableSpinner) {\n            showSpinner();\n            evt.data.transaction.then(hideSpinner, hideSpinner);\n          }\n        });\n      });\n    }\n  });\n\n  _context.register(AjaxProgressExtension, 'AjaxProgressExtension');\n}, {\n  BuilderExtension: 'Nittro.DI.BuilderExtension'\n});\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar Analysis = function () {\n  function Analysis(ajax, d3, c3, DOM, Hammer, EventEmitter, router) {\n    var _this = this;\n\n    classCallCheck(this, Analysis);\n\n    // Event emitter\n    Object.assign(this, EventEmitter);\n\n    this._ = {\n      ajax: ajax,\n      d3: d3,\n      c3: c3,\n      DOM: DOM,\n      Hammer: Hammer,\n      data: {},\n      tree: {},\n      elements: {\n        fields: null,\n        fieldName: null,\n        charts: null\n      },\n      charts: {\n        types: null\n      },\n      histograms: [],\n      mongoDbTypes: {\n        double: \"#8fd5d8\",\n        int: \"#99c7d8\",\n        long: \"#5e9ecc\",\n        decimal: \"#588dbf\",\n        minKey: \"#526fb3\",\n        maxKey: \"#aa52b3\",\n        timestamp: \"#b3529c\",\n        date: \"#b35269\",\n        symbol: \"#9eb352\",\n        string: \"#79b350\",\n        regex: \"#52b352\",\n        javascript: \"#52b381\",\n        javascriptWithScope: \"#52b392\",\n        objectId: \"#999182\",\n        dbPointer: \"#b3946b\",\n        object: \"#47aab3\",\n        array: \"#47b3b3\",\n        binData: \"#c2577d\",\n        'null': \"#cccccc\",\n        undefined: \"#999999\",\n        bool: \"#459599\"\n      }\n    };\n\n    router.getDOMRoute('#scheme-analysis').on('match', function (evt) {\n      return _this.analyze(evt.data[0]);\n    });\n  }\n\n  createClass(Analysis, [{\n    key: \"analyze\",\n    value: function analyze(el) {\n      var _this2 = this;\n\n      var url = this._.DOM.getData(el, 'url');\n      this._.ajax.get(url).then(function (status) {\n        return _this2.generate(status, el);\n      });\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(response, el) {\n      // Parse response\n      this.parseResponse(response);\n\n      // Charts\n      el.innerHTML = \"\";\n      this.createCharts(el);\n\n      // Fields table\n      this.createFieldsTable(el);\n    }\n  }, {\n    key: \"parseResponse\",\n    value: function parseResponse(response) {\n      var _this3 = this;\n\n      var payload = response.getPayload();\n      this._.data = {};\n      this._.tree = {\n        count: payload['analyzedDocs'],\n        children: {}\n      };\n\n      payload.fields.forEach(function (field) {\n        _this3._.data[field.name] = field;\n\n        var parent = _this3._.tree;\n        var parts = field.name.split('.');\n\n        // Create tree structure\n        parts.forEach(function (name, i) {\n          var last = i == parts.length - 1;\n\n          if (last) {\n            parent.children[name] = {\n              name: name,\n              fullName: field.name,\n              count: field.count,\n              percent: name == '[]' ? '-' : (field.count / parent.count * 100).toFixed(1) + '%',\n              children: {}\n            };\n          } else {\n            parent = parent.children[name];\n          }\n        });\n      });\n    }\n  }, {\n    key: \"createCharts\",\n    value: function createCharts(el) {\n      var _this4 = this;\n\n      this._.elements.charts = this._.DOM.create(\"div\", { \"class\": \"charts\" });\n      setTimeout(function () {\n        return _this4._.DOM.addClass(_this4._.elements.charts, 'show');\n      }); // fade-in\n      this._.DOM.append(el, this._.elements.charts);\n\n      // Field name\n      this._.elements.fieldName = this._.DOM.create(\"div\", { \"class\": \"field-name\" });\n      this._.DOM.append(this._.elements.charts, this._.elements.fieldName);\n\n      // Types pie chart\n      this._.charts.types = this.createChart(\"Types\", {\n        data: {\n          columns: [],\n          colors: this._.mongoDbTypes,\n          type: 'pie'\n        },\n        legend: { position: 'right' },\n        tooltip: { format: { value: function value(_value, ratio, id, index) {\n              return _value + ' = ' + _this4._.d3.format(\".1%\")(ratio);\n            } } },\n        pie: { label: { format: function format(value, ratio, id, index) {\n              return _this4._.d3.format(\".1%\")(ratio);\n            } } },\n        size: { height: 200 }\n      });\n\n      this.on('fieldSelect', function (evt) {\n        var field = evt.data.field;\n        var types = this._.data[field.fullName].types;\n\n        this._.charts.types.chart.load({\n          columns: types.map(function (t) {\n            return [t.type, t.count];\n          }),\n          unload: true\n        });\n\n        this._.charts.types.chart.resize();\n      });\n\n      // Clear old histograms\n      this.on('fieldSelect', function () {\n        return _this4.clearAllHistograms();\n      });\n\n      // Value histograms\n      this.on('fieldSelect', function (evt) {\n        var _this5 = this;\n\n        var field = evt.data.field;\n        var types = this._.data[field.fullName].types;\n\n        types.forEach(function (t) {\n          if (t.weekdayHistogram) {\n            _this5.createWeekdayHistogram(t);\n          }\n\n          if (t.hourHistogram) {\n            _this5.createHourHistogram(t);\n          }\n\n          if (t.valueHistogram) {\n            _this5.createValueHistogram(t);\n          }\n\n          if (t.lengthHistogram) {\n            _this5.createLengthHistogram(t);\n          }\n        });\n      });\n\n      // Resize charts\n      requestAnimationFrame(function () {\n        Object.keys(_this4._.charts).forEach(function (key) {\n          return _this4._.charts[key].chart.resize();\n        });\n      });\n    }\n  }, {\n    key: \"createChart\",\n    value: function createChart(name, config) {\n      var containerEl = this._.DOM.create(\"div\", { \"class\": \"chart\" });\n      var titleEl = this._.DOM.create(\"div\", { \"class\": \"chart-title\" });\n      var chartEl = this._.DOM.create(\"div\", { \"class\": \"chart-c3\" });\n\n      titleEl.innerHTML = name;\n\n      this._.DOM.append(containerEl, titleEl);\n      this._.DOM.append(containerEl, chartEl);\n      this._.DOM.append(this._.elements.charts, containerEl);\n\n      config['bindto'] = chartEl;\n      return {\n        chart: this._.c3.generate(config),\n        element: containerEl\n      };\n    }\n  }, {\n    key: \"createValueHistogram\",\n    value: function createValueHistogram(type) {\n      var data = type.valueHistogram;\n\n      var histogram = this.createChart('Value histogram - ' + type.type, {\n        data: {\n          x: 'x',\n          columns: [['x'].concat(data.intervals.map(function (v, i) {\n            return i * data.step + data.start;\n          })), ['count'].concat(data.intervals)],\n          type: 'bar'\n        },\n        bar: { width: { ratio: 0.8 } },\n        axis: {\n          x: {\n            type: 'categories',\n            tick: {\n              centered: true,\n              outer: false,\n              culling: {\n                max: 15\n              },\n              fit: false\n            }\n          }\n        },\n        legend: {\n          show: false\n        },\n        // zoom: {\n        //   rescale: true,\n        //   enabled: true\n        // },\n        size: { height: 250 }\n      });\n\n      this._.histograms.push(histogram);\n    }\n  }, {\n    key: \"createLengthHistogram\",\n    value: function createLengthHistogram(type) {\n      var data = type.lengthHistogram;\n\n      var histogram = this.createChart('Length histogram - ' + type.type, {\n        data: {\n          x: 'x',\n          columns: [['x'].concat(data.intervals.map(function (v, i) {\n            return i * data.step + data.start;\n          })), ['count'].concat(data.intervals)],\n          type: 'bar'\n        },\n        bar: { width: { ratio: 0.8 } },\n        axis: {\n          x: {\n            type: 'categories',\n            tick: {\n              centered: true,\n              outer: false,\n              culling: {\n                max: 15\n              },\n              fit: false\n            }\n          }\n        },\n        legend: {\n          show: false\n        },\n        // zoom: {\n        //   rescale: true,\n        //   enabled: true\n        // },\n        size: { height: 250 }\n      });\n\n      this._.histograms.push(histogram);\n    }\n  }, {\n    key: \"createWeekdayHistogram\",\n    value: function createWeekdayHistogram(type) {\n      var data = type.weekdayHistogram;\n\n      var histogram = this.createChart('Day of week histogram - ' + type.type, {\n        data: {\n          x: 'x',\n          columns: [['x', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], ['count'].concat(data)],\n          type: 'bar'\n        },\n        bar: { width: { ratio: 0.8 } },\n        axis: {\n          x: {\n            type: 'categories',\n            tick: {\n              centered: true,\n              outer: false,\n              culling: {\n                max: 15\n              },\n              fit: false\n            }\n          }\n        },\n        legend: {\n          show: false\n        },\n        // zoom: {\n        //   rescale: true,\n        //   enabled: true\n        // },\n        size: { height: 250 }\n      });\n\n      this._.histograms.push(histogram);\n    }\n  }, {\n    key: \"createHourHistogram\",\n    value: function createHourHistogram(type) {\n      var data = type.hourHistogram;\n\n      var histogram = this.createChart('Hour histogram - ' + type.type, {\n        data: {\n          x: 'x',\n          columns: [['x', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], ['count'].concat(data)],\n          type: 'bar'\n        },\n        bar: { width: { ratio: 0.8 } },\n        axis: {\n          x: {\n            type: 'categories',\n            tick: {\n              centered: true,\n              outer: false,\n              culling: {\n                max: 15\n              },\n              fit: false\n            }\n          }\n        },\n        legend: {\n          show: false\n        },\n        // zoom: {\n        //   rescale: true,\n        //   enabled: true\n        // },\n        size: { height: 250 }\n      });\n\n      this._.histograms.push(histogram);\n    }\n  }, {\n    key: \"clearAllHistograms\",\n    value: function clearAllHistograms() {\n      this._.histograms.forEach(function (vh) {\n        vh.chart.destroy();\n        vh.element.parentNode.removeChild(vh.element);\n      });\n      this._.histograms = [];\n    }\n  }, {\n    key: \"createFieldsTable\",\n    value: function createFieldsTable(el) {\n      var _this7 = this;\n\n      var that = this;\n      this._.elements.fields = this._.DOM.create(\"div\", { \"class\": \"fields\" });\n      this._.DOM.append(el, this._.elements.fields);\n\n      // Table\n      var fields = this._.d3.select(this._.elements.fields);\n      setTimeout(function () {\n        return fields.classed('show', true);\n      }, 0); // fade-in\n\n      // Title\n      var title = fields.append('div').attr('class', 'title');\n      title.append('div').attr('class', 'name').text('Name');\n      var titleData = title.append('div').attr('class', 'data');\n      titleData.append('div').attr('class', 'count').text('Occur');\n      titleData.append('div').attr('class', 'percent').text('Occur %');\n\n      // Nested field table\n      function makeNestedListItems(parentLists) {\n        var item = parentLists.append('li').attr('class', function (d) {\n          return Object.keys(d.children).length > 0 ? 'field-li has-children closed' : 'field-li closed';\n        });\n\n        var field = item.append('div').attr('class', 'field').each(function (d) {\n          var _this6 = this;\n\n          // Default focus _id field\n          if (d.fullName == \"_id\") {\n            that.focusField(this, d);\n          }\n\n          // Focus field on tap\n          that._.Hammer(this).on(\"tap\", function () {\n            that.focusField(_this6, d);\n          });\n        });\n\n        field.append('div').attr('class', 'name').html(function (d) {\n          return d.name == '[]' ? \"<span class='array-item'>array item</span>\" : d.name;\n        });\n\n        var data = field.append('div').attr('class', 'data');\n\n        data.append('div').attr('class', 'count').text(function (d) {\n          return d.count;\n        });\n\n        data.append('div').attr('class', 'percent').text(function (d) {\n          return d.percent;\n        });\n\n        var children = item.append('ul').selectAll('li').data(function (d) {\n          return Object.keys(d.children).map(function (key) {\n            return d.children[key];\n          }).sort(function (a, b) {\n            return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : a.name.toLowerCase() > b.name.toLowerCase();\n          });\n        }).enter();\n        if (!children.empty()) {\n          makeNestedListItems(children);\n        }\n      }\n\n      var rootList = fields.selectAll('ul').data(Object.keys(this._.tree.children).map(function (key) {\n        return _this7._.tree.children[key];\n      }).sort(function (a, b) {\n        return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : a.name.toLowerCase() > b.name.toLowerCase();\n      })).enter().append('ul');\n      makeNestedListItems(rootList);\n    }\n  }, {\n    key: \"focusField\",\n    value: function focusField(fieldEl, data) {\n      var _this8 = this;\n\n      var liEl = this._.DOM.closest(fieldEl, 'li');\n      this.selectField(liEl, data);\n\n      if (this._.DOM.hasClass(liEl, 'opened')) {\n        this._.DOM.removeClass(liEl, 'opened');\n        this._.DOM.addClass(liEl, 'closed');\n      } else {\n        this._.elements.fields.querySelectorAll('li').forEach(function (li) {\n          _this8._.DOM.removeClass(li, 'opened');\n          _this8._.DOM.addClass(li, 'closed');\n        });\n\n        var node = liEl;\n        while (node) {\n          if (!this._.DOM.hasClass(node, 'field-li')) {\n            break;\n          }\n          this._.DOM.removeClass(node, 'closed');\n          this._.DOM.addClass(node, 'opened');\n          node = this._.DOM.closest(node.parentNode, 'li');\n        }\n      }\n    }\n  }, {\n    key: \"selectField\",\n    value: function selectField(li, field) {\n      // Select active element\n      this._.DOM.removeClass(this._.elements.fields.querySelectorAll('li.selected'), 'selected');\n      this._.DOM.addClass(li, 'selected');\n\n      // Change name\n      this._.elements.fieldName.innerHTML = field.fullName;\n\n      this.trigger('fieldSelect', { field: field });\n    }\n  }]);\n  return Analysis;\n}();\n\n/* global _context */\n/* global nprogress */\n/* global d3 */\n/* global c3 */\n/* global Hammer */\n/* global Globalize */\n_context.invoke(function (Nittro) {\n  // Get base path\n  var basePath = document.body.getAttribute('data-basepath');\n\n  // App configuration\n  var configuration = {};\n\n  _context.lookup('Nittro.Page.Service').defaults.autoResetForms = false;\n\n  // Setup builder\n  var builder = new Nittro.DI.ContainerBuilder({\n    params: {\n      configuration: configuration,\n      page: {\n        transitions: {\n          defaultSelector: '.transition-auto'\n        },\n        i18n: {\n          connectionError: Globalize.formatMessage('errors/ajax/connection'),\n          unknownError: Globalize.formatMessage('errors/ajax/unknown')\n        }\n      },\n      forms: {\n        autoResetForms: false\n      }\n    },\n    extensions: {\n      forms: 'Nittro.Forms.Bridges.FormsDI.FormsExtension()',\n      ajax: 'Nittro.Ajax.Bridges.AjaxDI.AjaxExtension()',\n      page: 'Nittro.Page.Bridges.PageDI.PageExtension()',\n      routing: 'Nittro.Routing.Bridges.RoutingDI.RoutingExtension()',\n      flashes: 'Nittro.Flashes.Bridges.FlashesDI.FlashesExtension()',\n      tweaks: 'Nittro.TweaksExtension',\n      spinner: 'Nittro.AjaxProgressExtension'\n    },\n    services: {\n      window: function (_window) {\n        function window() {\n          return _window.apply(this, arguments);\n        }\n\n        window.toString = function () {\n          return _window.toString();\n        };\n\n        return window;\n      }(function () {\n        return window;\n      }),\n      nprogress: function (_nprogress) {\n        function nprogress() {\n          return _nprogress.apply(this, arguments);\n        }\n\n        nprogress.toString = function () {\n          return _nprogress.toString();\n        };\n\n        return nprogress;\n      }(function () {\n        return nprogress;\n      }),\n      DOM: function DOM() {\n        return _context.lookup('Utils.DOM');\n      },\n      EventEmitter: function EventEmitter() {\n        return _context.lookup('Nittro.EventEmitter');\n      },\n      Event: function Event() {\n        return _context.lookup('Nittro.Event');\n      },\n      d3: function (_d) {\n        function d3() {\n          return _d.apply(this, arguments);\n        }\n\n        d3.toString = function () {\n          return _d.toString();\n        };\n\n        return d3;\n      }(function () {\n        return d3;\n      }),\n      c3: function (_c) {\n        function c3() {\n          return _c.apply(this, arguments);\n        }\n\n        c3.toString = function () {\n          return _c.toString();\n        };\n\n        return c3;\n      }(function () {\n        return c3;\n      }),\n      Hammer: function (_Hammer) {\n        function Hammer() {\n          return _Hammer.apply(this, arguments);\n        }\n\n        Hammer.toString = function () {\n          return _Hammer.toString();\n        };\n\n        return Hammer;\n      }(function () {\n        return Hammer;\n      }),\n      analysis: { factory: 'App.Analysis', run: true }\n    }\n  });\n\n  _context.register(Analysis, 'App.Analysis');\n\n  // Create container\n  this.di = builder.createContainer();\n  this.di.runServices();\n});\n"],"file":"../main.js"}